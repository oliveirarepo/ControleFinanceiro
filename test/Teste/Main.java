/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Teste;

import java.awt.image.BufferedImage;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import uk.co.mmscomputing.device.scanner.*;
import uk.co.mmscomputing.device.scanner.ScannerIOMetadata.Type;

/**
 *
 * @author Thiago
 */

public class Main extends javax.swing.JFrame implements ScannerListener {

    Scanner scanner;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        inicialize();
    }

    private void inicialize() {
        setSize(709, 446);
        setTitle("Teste Scanning");
    }

    private void doScannear() throws ScannerIOException {
        System.out.println("Device...");
        scanner.select("HP Photosmart C3100 series");
        scanner = Scanner.getDevice();
        System.out.println(scanner.getDeviceNames()[0]);
        System.out.println("Ouvinte..");
        scanner.addListener(this);
        System.out.println("Adquirir imagem...");
        System.out.println("Dispositivo: " + scanner.getDeviceNames());
        if (scanner.isAPIInstalled()) {
            System.out.println("API Instalada, Nome dispositivo: " + scanner.getSelectedDeviceName());
        } else {
            System.out.println("API NÃ£o Instalada.");
        }
        scanner.acquire();
        if (scanner.isAPIInstalled()) {
            System.out.println("API Instalada! O nome do dispositivo: " + scanner.getSelectedDeviceName());
        }
        System.out.println("Ok!");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jContentPanel = new javax.swing.JPanel();
        jPanelTop = new javax.swing.JPanel();
        jPanelCenter = new javax.swing.JPanel();
        btnDigitalizar = new javax.swing.JButton();
        jPanelBottom = new javax.swing.JPanel();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jContentPanel.setLayout(new java.awt.BorderLayout());
        jPanelTop.setPreferredSize(new java.awt.Dimension(400, 100));
        javax.swing.GroupLayout jPanelTopLayout = new javax.swing.GroupLayout(jPanelTop);
        jPanelTop.setLayout(jPanelTopLayout);
        jPanelTopLayout.setHorizontalGroup(
                jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanelTopLayout.setVerticalGroup(
                jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 100, Short.MAX_VALUE)
        );
        jContentPanel.add(jPanelTop, java.awt.BorderLayout.NORTH);
        jPanelCenter.setLayout(new java.awt.GridBagLayout());
        btnDigitalizar.setText("Digitalizar");
        btnDigitalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDigitalizarActionPerformed(evt);
            }
        });
        jPanelCenter.add(btnDigitalizar, new java.awt.GridBagConstraints());
        jContentPanel.add(jPanelCenter, java.awt.BorderLayout.CENTER);
        jPanelBottom.setPreferredSize(new java.awt.Dimension(400, 100));
        javax.swing.GroupLayout jPanelBottomLayout = new javax.swing.GroupLayout(jPanelBottom);
        jPanelBottom.setLayout(jPanelBottomLayout);
        jPanelBottomLayout.setHorizontalGroup(
                jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanelBottomLayout.setVerticalGroup(
                jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 100, Short.MAX_VALUE)
        );
        jContentPanel.add(jPanelBottom, java.awt.BorderLayout.PAGE_END);
        getContentPane().add(jContentPanel, java.awt.BorderLayout.NORTH);
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDigitalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDigitalizarActionPerformed
        try {
            doScannear();
        } catch (ScannerIOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDigitalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Main thisClass = new Main();
                thisClass.setDefaultCloseOperation(3);
                thisClass.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDigitalizar;
    private javax.swing.JPanel jContentPanel;
    private javax.swing.JPanel jPanelBottom;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelTop;

    // End of variables declaration//GEN-END:variables

    @Override
    public void update(ScannerIOMetadata.Type type, ScannerIOMetadata metadata) {
        if (type.equals(ScannerIOMetadata.ACQUIRED)) {
            BufferedImage image = metadata.getImage();
            System.out.println("Existe uma nova imagem!");
            try {
                ImageIO.write(image, "png", new File("mmsc_image.png"));
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (type.equals(ScannerIOMetadata.NEGOTIATE)) {
            System.out.println(" If - ScannerIOMetadata.NEGOTIATE");
            ScannerDevice device = metadata.getDevice();
            try {
            } catch (Exception e) {
                System.out.println(" If - ScannerIOMetadata.NEGOTIATE Catch");
                e.printStackTrace();
            }
        } else if (type.equals(ScannerIOMetadata.STATECHANGE)) {
            System.err.println("Estado: " + metadata.getStateStr());
            if (metadata.isFinished()) {
                System.exit(0);
            }
        } else if (type.equals(ScannerIOMetadata.EXCEPTION)) {
            System.out.println("Existe algum erro?!");
            try {
                System.out.println("API Instalada! O nome do dispositivo: " + scanner.getSelectedDeviceName());
            } catch (ScannerIOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            metadata.getException().printStackTrace();
        }
    }
}
